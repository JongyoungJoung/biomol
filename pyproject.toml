[build-system]
requires = ["setuptools>=60", "versioneer[toml]==0.29"]
build-backend = "setuptools.build_meta"

[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "src/Biomol/_version.py"
versionfile_build = "Biomol/_version.py"
tag_prefix = "v"
parentdir_predic = "biomolecule-"

[project]
name = "biomolecule"
dynamics = ["version", "dependencies", "optional-dependencies"]
version = "0.0.1"
authors = [
  { name="Jongyoung Joung", email="jongyoungjoung@gmail.com" },
]
description = "Frequently used core modules that would be the base modules for advanced functions"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.10,<4"
classifiers = [
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    #"Programming Language :: Python :: 3.8",
    #"Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
keywords = ["development", "template"]

[project.urls]
#Homepage = "https://github.com/JongyoungJoung/jounglab"
#Issues = "https://github.com/JongyoungJoung/jounglab/issues"
Homepage = "https://github.com/deargen/Biomolecule-As-Basis-For-Modeling"

[project.scripts]
biomolecule = "Biomol.cli:main"

[tool.setuptools.dynamic]
dependencies = {file = ["deps/requirements.in"]}

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
addopts = "--cov=Biomol"
testpaths = ["tests"]

[tool.ruff]
namespace-packages = ["tools", "scripts", "tests"]  # for INP rule, suppress on these directories
extend-exclude = [
  "src/Biomol/_version.py",  # CHANGE
]

[tool.ruff.lint]
# OPTIONALLY ADD MORE LATER
select = [
  # flake8
  "E",
  "F",
  "W",
  "B",    # Bugbear
  "D",    # Docstring
  "D213", # Multi-line docstring summary should start at the second line (replace D212)
  "N",    # Naming
  "C4",   # flake8-comprehensions
  "UP",   # pyupgrade
  "SIM",  # simplify
  "RUF",  # ruff-specific
  "RET501",  # return
  "RET502",  # return
  "RET503",  # return
  "PTH",  # path
  "NPY",  # numpy
  "PD",   # pandas
  "PYI",  # type stubs for pyright/pylance
  "PT",   # pytest
  "PIE",  #
  "LOG",  # logging
  "COM818",  # comma misplaced
  "COM819",  # comma
  "DTZ",  # datetime
  "YTT",
  "ASYNC",
  "FBT",  # boolean trap
  "A",    # Shadowing python builtins
  "EXE",  # executable (shebang)
  "FA",   # future annotations
  "ISC",  # Implicit string concatenation
  "ICN",  # Import convention 
  "INP",  # Implicit namespace package (no __init__.py)
  "Q",    # Quotes
  "RSE",  # raise
  "SLOT", # __slots__
  "PL",   # Pylint
  "TRY",  # try
  "FAST", # FastAPI
  "AIR",  # airflow
  "DOC",  # docstring
  "TID",  # tidy-imports

  # Not important
  "T10",  # debug statements
  "T20",  # print statements
]

ignore = [
  "E402",    # Module level import not at top of file
  "W293",    # Blank line contains whitespace
  "W291",    # Trailing whitespace
  "D10",     # Missing docstring in public module / function / etc.
  "D200",    # One-line docstring should fit on one line with quotes
  "D212",    # Multi-line docstring summary should start at the first line
  "D417",    # require documentation for every function parameter.
  "D401",    # require an imperative mood for all docstrings.
  "DOC201",  # missing Return field in docstring
  "PTH123",  # Path.open should be used instead of built-in open
  "PT006",   # Pytest parameterize style
  "N812",    # Lowercase `functional` imported as non-lowercase `F` (import torch.nn.functional as F)
  "NPY002",  # legacy numpy random
  "UP017",   # datetime.timezone.utc -> datetime.UTC
  "SIM108",  # use ternary operator instead of if-else
  "TRY003",  # long message in except
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # Ignore seemingly unused imports (they're meant for re-export)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
# Black or ruff will enforce line length to be 88, except for docstrings and comments.
# We set it to 120 so we have more space for docstrings and comments.
max-line-length = 120

[tool.ruff.lint.isort]
# combine-as-imports = true
known-third-party = ["wandb"]
known-first-party = [
  "rust_graph",
  "bio_data_to_db",
  "reduce_binary",
  "apbs_binary",
  "msms_binary",
  "slack_helpers",
  "biotest",
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"pytorch_lightning".msg = "Use lightning.fabric instead"
"lightning.pytorch".msg = "Use lightning.fabric instead"
"lightning.fabric".msg = "Use lightning.fabric instead"
"accelerate".msg = "Use lightning.fabric instead"
"os.system".msg = "Use subprocess.run or subprocess.Popen instead"
"easydict".msg = "Use typing.TypedDict instead (also consider dataclasses and pydantic)"

[tool.ruff.lint.pylint]
max-args = 10
max-bool-expr = 10
max-statements = 100
max-returns = 10
max-public-methods = 30
max-nested-blocks = 10
max-locals = 30
max-branches = 24

[tool.pyright]
include = ["src"]

typeCheckingMode = "standard"
useLibraryCodeForTypes = true
autoImportCompletions = true

pythonVersion = "3.10"

[tool.coverage.report]
omit = [
  "src/Biomol/_version.py",
  # OPTIONALLY ADD MORE LATER
]
